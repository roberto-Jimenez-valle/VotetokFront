generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================================
// USUARIOS
// ===============================================

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  displayName   String    @map("display_name")
  avatarUrl     String?   @map("avatar_url")
  bio           String?
  role          String    @default("user")
  verified      Boolean   @default(false)
  countryIso3   String?   @map("country_iso3")
  subdivisionId String?   @map("subdivision_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relaciones
  polls             Poll[]            @relation("PollCreator")
  createdOptions    PollOption[]      @relation("OptionCreator")
  votes             Vote[]
  interactions      PollInteraction[]
  comments          Comment[]
  featuredProfile   FeaturedUser?
  followers         UserFollower[]    @relation("UserFollowers")
  following         UserFollower[]    @relation("UserFollowing")
  interests         UserInterest[]
  hashtagFollows    UserHashtagFollow[]

  @@index([username])
  @@index([countryIso3])
  @@index([createdAt])
  @@map("users")
}

// ===============================================
// ENCUESTAS Y OPCIONES
// ===============================================

model Poll {
  id             Int       @id @default(autoincrement())
  userId         Int       @map("user_id")
  title          String
  description    String?
  category       String?
  imageUrl       String?   @map("image_url")  // Imagen de la encuesta (no avatar del usuario)
  type           String    @default("poll")  // poll, multiple, collaborative, hashtag
  status         String    @default("active")
  isRell         Boolean   @default(false) @map("is_rell")  // Si es una republicación
  originalPollId Int?      @map("original_poll_id")  // ID del poll original (si es rell)
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  closedAt       DateTime? @map("closed_at")

  // Relaciones
  user         User              @relation("PollCreator", fields: [userId], references: [id], onDelete: Cascade)
  originalPoll Poll?             @relation("PollRells", fields: [originalPollId], references: [id], onDelete: SetNull)
  rells        Poll[]            @relation("PollRells")  // Rells de este poll
  options      PollOption[]
  votes        Vote[]
  interactions PollInteraction[]
  comments     Comment[]
  hashtags     PollHashtag[]
  history      VoteHistory[]

  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([type])
  @@index([isRell])
  @@index([originalPollId])
  @@index([createdAt])
  @@index([status, createdAt])  // Para queries ordenadas por fecha
  @@map("polls")
}

model PollOption {
  id           Int      @id @default(autoincrement())
  pollId       Int      @map("poll_id")
  optionKey    String   @map("option_key")
  optionLabel  String   @map("option_label")
  color        String
  displayOrder Int      @default(0) @map("display_order")
  createdById  Int?     @map("created_by_id")  // Avatar se obtiene desde createdBy.avatarUrl
  createdAt    DateTime @default(now()) @map("created_at")

  // Relaciones
  poll      Poll          @relation(fields: [pollId], references: [id], onDelete: Cascade)
  createdBy User?         @relation("OptionCreator", fields: [createdById], references: [id], onDelete: SetNull)
  votes     Vote[]
  history   VoteHistory[]

  @@unique([pollId, optionKey])  // optionKey único por encuesta
  @@index([pollId])
  @@index([createdById])
  @@index([pollId, displayOrder])
  @@map("poll_options")
}

// ===============================================
// VOTOS (Única fuente de verdad)
// ===============================================

model Vote {
  id              Int      @id @default(autoincrement())
  pollId          Int      @map("poll_id")
  optionId        Int      @map("option_id")
  userId          Int?     @map("user_id")
  
  // Geolocalización - FK a subdivisión más granular disponible
  latitude        Float
  longitude       Float
  subdivisionId   Int?     @map("subdivision_id")  // FK a Subdivision (opcional si no se puede identificar)
  
  // Metadata
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relaciones
  poll         Poll        @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option       PollOption  @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  subdivision  Subdivision? @relation(fields: [subdivisionId], references: [id], onDelete: Restrict)

  // NO usar @@unique([pollId, userId]) porque impide votos anónimos múltiples
  // La validación de "un voto por usuario" se hace en código (por userId o IP)
  @@index([optionId])           // Query por opción
  @@index([userId])             // Query por usuario
  @@index([pollId])             // Query por encuesta
  @@index([pollId, userId])     // Query para verificar voto existente
  @@index([pollId, ipAddress])  // Query para verificar voto anónimo
  @@index([subdivisionId])      // Query por subdivisión
  @@index([latitude, longitude]) // Query geoespacial
  @@index([createdAt])          // Query temporal
  @@map("votes")
}

// ===============================================
// INTERACCIONES
// ===============================================

model PollInteraction {
  id              Int      @id @default(autoincrement())
  pollId          Int      @map("poll_id")
  userId          Int      @map("user_id")
  interactionType String   @map("interaction_type")
  createdAt       DateTime @default(now()) @map("created_at")

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, interactionType])
  @@index([pollId])
  @@index([userId])
  @@map("poll_interactions")
}

model Comment {
  id              Int       @id @default(autoincrement())
  pollId          Int       @map("poll_id")
  userId          Int       @map("user_id")
  parentCommentId Int?      @map("parent_comment_id")
  content         String
  likesCount      Int       @default(0) @map("likes_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  poll          Poll      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")

  @@index([pollId])
  @@index([userId])
  @@map("comments")
}

model FeaturedUser {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  roleTitle      String?  @map("role_title")
  citationsCount Int      @default(0) @map("citations_count")
  displaySize    Int      @default(30) @map("display_size")
  highlightColor String?  @map("highlight_color")
  featuredOrder  Int      @default(0) @map("featured_order")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("featured_users")
}

model UserFollower {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_followers")
}

model VoteHistory {
  id         Int      @id @default(autoincrement())
  pollId     Int      @map("poll_id")
  optionId   Int      @map("option_id")
  voteCount  Int      @map("vote_count")
  percentage Float
  recordedAt DateTime @default(now()) @map("recorded_at")

  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@index([pollId])
  @@index([recordedAt])
  @@map("vote_history")
}

model Hashtag {
  id         Int      @id @default(autoincrement())
  tag        String   @unique
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")

  polls          PollHashtag[]
  userFollows    UserHashtagFollow[]

  @@map("hashtags")
}

model PollHashtag {
  pollId    Int @map("poll_id")
  hashtagId Int @map("hashtag_id")

  poll    Poll    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([pollId, hashtagId])
  @@map("poll_hashtags")
}

// Nuevas tablas para sistema de recomendaciones "Para ti"

model UserInterest {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  category   String   // Categoría de interés
  score      Float    @default(1.0) // Score de interés (aumenta con interacciones)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@index([userId])
  @@map("user_interests")
}

model UserHashtagFollow {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  hashtagId Int      @map("hashtag_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([userId, hashtagId])
  @@index([userId])
  @@index([hashtagId])
  @@map("user_hashtag_follows")
}

// ===============================================
// TABLA GEOGRÁFICA - SUBDIVISIONES JERÁRQUICAS
// ===============================================

// Subdivisiones de 3 niveles jerárquicos
// Nivel 1: Estados/Comunidades Autónomas (ESP.1, USA.CA)
// Nivel 2: Provincias/Condados (ESP.1.2, USA.CA.001)
// Nivel 3: Municipios/Cities (ESP.1.2.3)
model Subdivision {
  id              Int      @id @default(autoincrement())
  
  subdivisionId   String   @unique @map("subdivision_id")  // ID jerárquico completo (ESP.1, ESP.1.2, ESP.1.2.3)
  level           Int                                      // Nivel: 1, 2, 3
  
  // Identificación del nivel actual (IDs numéricos extraídos)
  level1Id        String?  @map("level1_id")              // Número ID nivel 1: "1", "13"
  level2Id        String?  @map("level2_id")              // Número ID nivel 2: "2", "28"
  level3Id        String?  @map("level3_id")              // Número ID nivel 3
  
  // Nombres
  name            String                                   // Nombre principal (name_1/2/3)
  nameLocal       String?  @map("name_local")             // Nombre en idioma local (nl_name_1/2/3)
  nameVariant     String?  @map("name_variant")           // Variantes del nombre (varname_1/2/3)
  
  // Tipo de subdivisión
  typeEnglish     String?  @map("type_english")           // Tipo en inglés: "Autonomous Community" (engtype_1/2/3)
  
  // Códigos estándar internacionales
  hasc            String?                                  // HASC code: ES.AN, ES.AN.AM (hasc_1/2/3)
  iso             String?                                  // ISO code (solo nivel 1) (iso_1)
  countryCode     String?  @map("country_code")           // Código numérico: 01, 04, 11 (cc_1/2/3)
  
  // Geolocalización
  latitude        Float                                    // Latitud del centroide
  longitude       Float                                    // Longitud del centroide
  
  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relación inversa
  votes           Vote[]
  
  @@index([level])
  @@index([subdivisionId])
  @@index([latitude, longitude])
  @@index([level, latitude, longitude])
  @@map("subdivisions")
}
