generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  email        String    @unique
  displayName  String    @map("display_name")
  avatarUrl    String?   @map("avatar_url")
  bio          String?
  role         String    @default("user")
  verified     Boolean   @default(false)
  countryIso3  String?   @map("country_iso3")      // País del usuario
  subdivisionId String?  @map("subdivision_id")    // Región/estado del usuario
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  polls              Poll[]
  votes              Vote[]
  interactions       PollInteraction[]
  comments           Comment[]
  featuredProfile    FeaturedUser?
  followers          UserFollower[]    @relation("UserFollowers")
  following          UserFollower[]    @relation("UserFollowing")
  interests          UserInterest[]
  hashtagFollows     UserHashtagFollow[]

  @@map("users")
}

model Poll {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  title       String
  description String?
  category    String?
  imageUrl    String?   @map("image_url")
  type        String    @default("poll")
  status      String    @default("active")
  totalVotes  Int       @default(0) @map("total_votes")
  totalViews  Int       @default(0) @map("total_views")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  closedAt    DateTime? @map("closed_at")

  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  options      PollOption[]
  votes        Vote[]
  interactions PollInteraction[]
  comments     Comment[]
  hashtags     PollHashtag[]
  history      VoteHistory[]

  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([createdAt])
  @@map("polls")
}

model PollOption {
  id           Int      @id @default(autoincrement())
  pollId       Int      @map("poll_id")
  optionKey    String   @map("option_key")
  optionLabel  String   @map("option_label")
  color        String
  avatarUrl    String?  @map("avatar_url")
  voteCount    Int      @default(0) @map("vote_count")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")

  poll    Poll          @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes   Vote[]
  history VoteHistory[]

  @@index([pollId])
  @@map("poll_options")
}

model Vote {
  id              Int      @id @default(autoincrement())
  pollId          Int      @map("poll_id")
  optionId        Int      @map("option_id")
  userId          Int?     @map("user_id")
  latitude        Float
  longitude       Float
  countryIso3     String   @map("country_iso3")
  countryName     String?  @map("country_name")
  subdivisionId   String?  @map("subdivision_id")    // ID_1 del polígono (ej: "1" = Andalucía)
  subdivisionName String?  @map("subdivision_name")  // Nombre (ej: "Andalucía")
  cityName        String?  @map("city_name")
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  createdAt       DateTime @default(now()) @map("created_at")

  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user   User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([pollId])
  @@index([latitude, longitude])
  @@index([countryIso3])
  @@index([countryIso3, subdivisionId])
  @@index([createdAt])
  @@map("votes")
}

model PollInteraction {
  id              Int      @id @default(autoincrement())
  pollId          Int      @map("poll_id")
  userId          Int      @map("user_id")
  interactionType String   @map("interaction_type")
  createdAt       DateTime @default(now()) @map("created_at")

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, interactionType])
  @@index([pollId])
  @@index([userId])
  @@map("poll_interactions")
}

model Comment {
  id              Int       @id @default(autoincrement())
  pollId          Int       @map("poll_id")
  userId          Int       @map("user_id")
  parentCommentId Int?      @map("parent_comment_id")
  content         String
  likesCount      Int       @default(0) @map("likes_count")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  poll          Poll      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")

  @@index([pollId])
  @@index([userId])
  @@map("comments")
}

model FeaturedUser {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique @map("user_id")
  roleTitle      String?  @map("role_title")
  citationsCount Int      @default(0) @map("citations_count")
  displaySize    Int      @default(30) @map("display_size")
  highlightColor String?  @map("highlight_color")
  featuredOrder  Int      @default(0) @map("featured_order")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("featured_users")
}

model UserFollower {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_followers")
}

model VoteHistory {
  id         Int      @id @default(autoincrement())
  pollId     Int      @map("poll_id")
  optionId   Int      @map("option_id")
  voteCount  Int      @map("vote_count")
  percentage Float
  recordedAt DateTime @default(now()) @map("recorded_at")

  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)

  @@index([pollId])
  @@index([recordedAt])
  @@map("vote_history")
}

model Hashtag {
  id         Int      @id @default(autoincrement())
  tag        String   @unique
  usageCount Int      @default(0) @map("usage_count")
  createdAt  DateTime @default(now()) @map("created_at")

  polls          PollHashtag[]
  userFollows    UserHashtagFollow[]

  @@map("hashtags")
}

model PollHashtag {
  pollId    Int @map("poll_id")
  hashtagId Int @map("hashtag_id")

  poll    Poll    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([pollId, hashtagId])
  @@map("poll_hashtags")
}

// Nuevas tablas para sistema de recomendaciones "Para ti"

model UserInterest {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  category   String   // Categoría de interés
  score      Float    @default(1.0) // Score de interés (aumenta con interacciones)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@index([userId])
  @@map("user_interests")
}

model UserHashtagFollow {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  hashtagId Int      @map("hashtag_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([userId, hashtagId])
  @@index([userId])
  @@index([hashtagId])
  @@map("user_hashtag_follows")
}

// ===============================================
// TABLAS MAESTRAS GEOGRÁFICAS - 3 NIVELES
// ===============================================

// NIVEL 0: Países
model Country {
  id          Int            @id @default(autoincrement())
  iso3        String         @unique                      // Código ISO3 (ESP, USA, FRA)
  iso2        String?                                     // Código ISO2 (ES, US, FR)
  name        String                                      // Nombre oficial
  nameLocal   String?        @map("name_local")          // Nombre en idioma local
  latitude    Float                                       // Latitud del centroide
  longitude   Float                                       // Longitud del centroide
  hasLevel1   Boolean        @default(false) @map("has_level1")  // Tiene subdivisiones nivel 1
  hasLevel2   Boolean        @default(false) @map("has_level2")  // Tiene subdivisiones nivel 2
  createdAt   DateTime       @default(now()) @map("created_at")
  
  subdivisions Subdivision[]
  
  @@index([iso3])
  @@index([latitude, longitude])
  @@map("countries")
}

// NIVEL 1, 2, 3: Subdivisiones jerárquicas
// Nivel 1: Estados/Comunidades Autónomas (ESP.1, USA.CA)
// Nivel 2: Provincias/Condados (ESP.1.2, USA.CA.001)
// Nivel 3: Municipios/Cities (ESP.1.2.3)
model Subdivision {
  id              Int      @id @default(autoincrement())
  
  // Jerarquía
  countryId       Int      @map("country_id")
  country         Country  @relation(fields: [countryId], references: [id], onDelete: Cascade)
  
  subdivisionId   String   @unique @map("subdivision_id")  // ID jerárquico completo (ESP.1, ESP.1.2, ESP.1.2.3)
  level           Int                                      // Nivel: 1, 2, 3
  parentId        Int?     @map("parent_id")              // ID del registro padre en esta tabla
  parent          Subdivision? @relation("SubdivisionHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children        Subdivision[] @relation("SubdivisionHierarchy")
  
  // Identificación del nivel actual
  level1Id        String?  @map("level1_id")              // Número ID nivel 1 (ej: "1", "13")
  level2Id        String?  @map("level2_id")              // Número ID nivel 2 (ej: "2", "28")
  level3Id        String?  @map("level3_id")              // Número ID nivel 3
  
  // Nombres
  name            String                                   // Nombre principal
  nameLocal       String?  @map("name_local")             // Nombre local
  nameVariant     String?  @map("name_variant")           // Nombre variante
  nameEnglish     String?  @map("name_english")           // Nombre en inglés
  
  // Tipo de subdivisión
  type            String?                                  // Tipo (ej: "Comunidad Autónoma", "State", "Province")
  typeLocal       String?  @map("type_local")             // Tipo en idioma local
  
  // Geolocalización
  latitude        Float                                    // Latitud del centroide
  longitude       Float                                    // Longitud del centroide
  
  // Metadata
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@index([countryId])
  @@index([level])
  @@index([parentId])
  @@index([subdivisionId])
  @@index([latitude, longitude])
  @@index([level, latitude, longitude])
  @@map("subdivisions")
}
