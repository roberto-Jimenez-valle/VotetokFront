generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ===============================================
// USUARIOS
// ===============================================

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  email         String    @unique
  displayName   String    @map("display_name")
  avatarUrl     String?   @map("avatar_url")
  bio           String?
  role          String    @default("user")
  verified      Boolean   @default(false)
  countryIso3   String?   @map("country_iso3")
  subdivisionId String?   @map("subdivision_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relaciones
  polls             Poll[]            @relation("PollCreator")
  createdOptions    PollOption[]      @relation("OptionCreator")
  votes             Vote[]
  interactions      PollInteraction[]
  comments          Comment[]
  featuredProfile   FeaturedUser?
  followers         UserFollower[]    @relation("UserFollowers")
  following         UserFollower[]    @relation("UserFollowing")
  interests         UserInterest[]
  hashtagFollows    UserHashtagFollow[]

  @@index([username])
  @@index([countryIso3])
  @@index([createdAt])
  @@map("users")
}

// ===============================================
// ENCUESTAS Y OPCIONES
// ===============================================

model Poll {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  title       String
  description String?
  category    String?
  imageUrl    String?   @map("image_url")  // Imagen de la encuesta (no avatar del usuario)
  type        String    @default("poll")  // poll, multiple, collaborative, hashtag
  status      String    @default("active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  closedAt    DateTime? @map("closed_at")

  // Relaciones
  user         User              @relation("PollCreator", fields: [userId], references: [id], onDelete: Cascade)
  options      PollOption[]
  votes        Vote[]
  interactions PollInteraction[]
  comments     Comment[]
  hashtags     PollHashtag[]

  @@index([userId])
  @@index([category])
  @@index([status])
  @@index([type])
  @@index([createdAt])
  @@index([status, createdAt])  // Para queries ordenadas por fecha
  @@map("polls")
}

model PollOption {
  id           Int      @id @default(autoincrement())
  pollId       Int      @map("poll_id")
  optionKey    String   @map("option_key")
  optionLabel  String   @map("option_label")
  color        String
  displayOrder Int      @default(0) @map("display_order")
  createdById  Int?     @map("created_by_id")  // Avatar se obtiene desde createdBy.avatarUrl
  createdAt    DateTime @default(now()) @map("created_at")

  // Relaciones
  poll      Poll   @relation(fields: [pollId], references: [id], onDelete: Cascade)
  createdBy User?  @relation("OptionCreator", fields: [createdById], references: [id], onDelete: SetNull)
  votes     Vote[]

  @@unique([pollId, optionKey])  // optionKey único por encuesta
  @@index([pollId])
  @@index([createdById])
  @@index([pollId, displayOrder])
  @@map("poll_options")
}

// ===============================================
// VOTOS (Única fuente de verdad)
// ===============================================

model Vote {
  id              Int      @id @default(autoincrement())
  pollId          Int      @map("poll_id")       // Mantener para queries rápidas
  optionId        Int      @map("option_id")     // Fuente de verdad
  userId          Int?     @map("user_id")
  
  // Geolocalización
  latitude        Float
  longitude       Float
  countryIso3     String   @map("country_iso3")
  countryName     String?  @map("country_name")
  subdivisionId   String?  @map("subdivision_id")
  subdivisionName String?  @map("subdivision_name")
  cityName        String?  @map("city_name")
  
  // Metadata
  ipAddress       String?  @map("ip_address")
  userAgent       String?  @map("user_agent")
  createdAt       DateTime @default(now()) @map("created_at")

  // Relaciones
  poll   Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  user   User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([pollId, userId])  // Un usuario = un voto por encuesta
  @@index([optionId])         // Query por opción
  @@index([userId])           // Query por usuario
  @@index([pollId])           // Query por encuesta
  @@index([countryIso3])      // Query por país
  @@index([countryIso3, subdivisionId])  // Query por región
  @@index([latitude, longitude])         // Query geoespacial
  @@index([createdAt])        // Query temporal
  @@map("votes")
}

// ===============================================
// INTERACCIONES
// ===============================================

model PollInteraction {
  id              Int      @id @default(autoincrement())
  pollId          Int      @map("poll_id")
  userId          Int      @map("user_id")
  interactionType String   @map("interaction_type")  // save, share, repost
  createdAt       DateTime @default(now()) @map("created_at")

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, interactionType])
  @@index([pollId])
  @@index([userId])
  @@index([interactionType])
  @@map("poll_interactions")
}

model Comment {
  id              Int       @id @default(autoincrement())
  pollId          Int       @map("poll_id")
  userId          Int       @map("user_id")
  parentCommentId Int?      @map("parent_comment_id")
  content         String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  poll          Poll      @relation(fields: [pollId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentComment Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: Cascade)
  replies       Comment[] @relation("CommentReplies")

  @@index([pollId])
  @@index([userId])
  @@index([parentCommentId])
  @@index([pollId, createdAt])
  @@map("comments")
}

// ===============================================
// HASHTAGS
// ===============================================

model Hashtag {
  id        Int      @id @default(autoincrement())
  tag       String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  polls       PollHashtag[]
  userFollows UserHashtagFollow[]

  @@index([tag])
  @@map("hashtags")
}

model PollHashtag {
  pollId    Int @map("poll_id")
  hashtagId Int @map("hashtag_id")

  poll    Poll    @relation(fields: [pollId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@id([pollId, hashtagId])
  @@index([hashtagId])
  @@map("poll_hashtags")
}

// ===============================================
// USUARIOS DESTACADOS Y SEGUIMIENTO
// ===============================================

model FeaturedUser {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique @map("user_id")
  roleTitle     String?  @map("role_title")
  displaySize   Int      @default(30) @map("display_size")
  highlightColor String? @map("highlight_color")
  featuredOrder Int      @default(0) @map("featured_order")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isActive, featuredOrder])
  @@map("featured_users")
}

model UserFollower {
  id          Int      @id @default(autoincrement())
  followerId  Int      @map("follower_id")
  followingId Int      @map("following_id")
  createdAt   DateTime @default(now()) @map("created_at")

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_followers")
}

// ===============================================
// SISTEMA DE RECOMENDACIONES
// ===============================================

model UserInterest {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  category  String
  score     Float    @default(1.0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@index([userId])
  @@index([userId, score])
  @@map("user_interests")
}

model UserHashtagFollow {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  hashtagId Int      @map("hashtag_id")
  createdAt DateTime @default(now()) @map("created_at")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtag Hashtag @relation(fields: [hashtagId], references: [id], onDelete: Cascade)

  @@unique([userId, hashtagId])
  @@index([userId])
  @@index([hashtagId])
  @@map("user_hashtag_follows")
}

// ===============================================
// GEOGRAFÍA
// ===============================================

model Country {
  id        Int      @id @default(autoincrement())
  iso3      String   @unique
  iso2      String?
  name      String
  nameLocal String?  @map("name_local")
  latitude  Float
  longitude Float
  hasLevel1 Boolean  @default(false) @map("has_level1")
  hasLevel2 Boolean  @default(false) @map("has_level2")
  createdAt DateTime @default(now()) @map("created_at")
  
  subdivisions Subdivision[]
  
  @@index([iso3])
  @@index([latitude, longitude])
  @@map("countries")
}

model Subdivision {
  id            Int      @id @default(autoincrement())
  countryId     Int      @map("country_id")
  subdivisionId String   @unique @map("subdivision_id")
  level         Int
  parentId      Int?     @map("parent_id")
  
  level1Id      String?  @map("level1_id")
  level2Id      String?  @map("level2_id")
  level3Id      String?  @map("level3_id")
  
  name          String
  nameLocal     String?  @map("name_local")
  nameVariant   String?  @map("name_variant")
  nameEnglish   String?  @map("name_english")
  
  type          String?
  typeLocal     String?  @map("type_local")
  
  latitude      Float
  longitude     Float
  
  createdAt     DateTime @default(now()) @map("created_at")

  country  Country       @relation(fields: [countryId], references: [id], onDelete: Cascade)
  parent   Subdivision?  @relation("SubdivisionHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Subdivision[] @relation("SubdivisionHierarchy")
  
  @@index([countryId])
  @@index([level])
  @@index([parentId])
  @@index([subdivisionId])
  @@index([latitude, longitude])
  @@index([level, latitude, longitude])
  @@map("subdivisions")
}
