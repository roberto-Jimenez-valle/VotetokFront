version: '3.9'

services:
  # ===============================================
  # PostgreSQL Database
  # ===============================================
  postgres:
    image: postgres:16-alpine
    container_name: voutop-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER:-voutop}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-voutop_pass}
      POSTGRES_DB: ${DB_NAME:-voutop_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=es_ES.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/indexes-optimization.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-voutop}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voutop-network

  # ===============================================
  # Redis Cache
  # ===============================================
  redis:
    image: redis:7-alpine
    container_name: voutop-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
      --tcp-backlog 511
      --tcp-keepalive 60
      --timeout 0
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - voutop-network

  # ===============================================
  # Redis Commander (GUI para Redis)
  # ===============================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: voutop-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=${REDIS_COMMANDER_USER:-admin}
      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "8081:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - voutop-network
    profiles:
      - debug

  # ===============================================
  # pgAdmin (GUI para PostgreSQL)
  # ===============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: voutop-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@voutop.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - voutop-network
    profiles:
      - debug

  # ===============================================
  # MinIO (S3-compatible storage para assets)
  # ===============================================
  minio:
    image: minio/minio:latest
    container_name: voutop-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_DEFAULT_BUCKETS: voutop-assets,voutop-uploads
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - voutop-network
    profiles:
      - storage

  # ===============================================
  # Prometheus (Métricas)
  # ===============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: voutop-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - voutop-network
    profiles:
      - monitoring

  # ===============================================
  # Grafana (Dashboards)
  # ===============================================
  grafana:
    image: grafana/grafana:latest
    container_name: voutop-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource,redis-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
      - redis
    networks:
      - voutop-network
    profiles:
      - monitoring

  # ===============================================
  # Nginx (Reverse Proxy - Producción)
  # ===============================================
  nginx:
    image: nginx:alpine
    container_name: voutop-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./build/client:/usr/share/nginx/html:ro
    depends_on:
      - app
    networks:
      - voutop-network
    profiles:
      - production

  # ===============================================
  # Aplicación Node.js (Producción)
  # ===============================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: voutop-app
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-voutop}:${DB_PASSWORD:-voutop_pass}@postgres:5432/${DB_NAME:-voutop_db}
      REDIS_URL: redis://redis:6379
      PORT: 3000
    volumes:
      - ./static:/app/static:ro
      - ./build:/app/build:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - voutop-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  voutop-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
