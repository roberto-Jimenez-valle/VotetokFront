// Script para probar el endpoint de votaci√≥n
// Ejecutar con: node test-vote-endpoint.mjs

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function testVoteCreation() {
  console.log('‚ïê'.repeat(60));
  console.log('üß™ PRUEBA DE CREACI√ìN DE VOTO DIRECTAMENTE EN BD');
  console.log('‚ïê'.repeat(60));
  
  try {
    // 1. Buscar una encuesta activa
    const poll = await prisma.poll.findFirst({
      where: { status: 'active' },
      include: { options: true }
    });
    
    if (!poll) {
      console.error('‚ùå No se encontr√≥ ninguna encuesta activa');
      return;
    }
    
    console.log(`\n‚úÖ Encuesta encontrada: #${poll.id} - ${poll.title}`);
    console.log(`   Opciones disponibles: ${poll.options.length}`);
    
    if (poll.options.length === 0) {
      console.error('‚ùå La encuesta no tiene opciones');
      return;
    }
    
    // 2. Usar la primera opci√≥n
    const option = poll.options[0];
    console.log(`\nüìù Creando voto de prueba para opci√≥n: #${option.id} - ${option.optionLabel}`);
    
    // 3. Crear voto de prueba
    const testVote = await prisma.vote.create({
      data: {
        pollId: poll.id,
        optionId: option.id,
        userId: null, // Voto an√≥nimo
        latitude: 40.4168,
        longitude: -3.7038,
        countryIso3: 'ESP',
        countryName: 'Espa√±a',
        subdivisionId: null,
        subdivisionName: null,
        cityName: 'Madrid',
        ipAddress: '127.0.0.1',
        userAgent: 'Test Script'
      }
    });
    
    console.log('\n‚úÖ Voto de prueba creado exitosamente:');
    console.log(`   ID: ${testVote.id}`);
    console.log(`   Encuesta: ${testVote.pollId}`);
    console.log(`   Opci√≥n: ${testVote.optionId}`);
    console.log(`   Fecha: ${testVote.createdAt}`);
    
    // 4. Verificar que el voto existe
    const verification = await prisma.vote.findUnique({
      where: { id: testVote.id },
      include: {
        poll: { select: { title: true } },
        option: { select: { optionLabel: true } }
      }
    });
    
    console.log('\n‚úÖ Verificaci√≥n del voto:');
    console.log(`   Encuesta: ${verification.poll.title}`);
    console.log(`   Opci√≥n: ${verification.option.optionLabel}`);
    
    // 5. Contar votos totales
    const totalVotes = await prisma.vote.count();
    console.log(`\nüìä Total de votos en BD: ${totalVotes}`);
    
    console.log('\n‚úÖ CONCLUSI√ìN: La base de datos funciona correctamente');
    console.log('   El problema debe estar en el endpoint o en el frontend');
    
  } catch (error) {
    console.error('\n‚ùå ERROR:', error.message);
    console.error('   Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

testVoteCreation();
